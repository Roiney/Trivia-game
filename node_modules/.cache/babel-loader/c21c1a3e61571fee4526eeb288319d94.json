{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\n\nclass Game extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      question0: {},\n      // question1: {},\n      // question2: {},\n      // question3: {},\n      // question4: {},\n      isLoading: true\n    };\n\n    this.requestQuestions = async () => {\n      const {\n        history\n      } = this.props;\n      const token = localStorage.getItem('token');\n      console.log(token);\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n      const questions = await response.json();\n      console.log(questions.response_code);\n\n      if (questions.response_code > 0) {\n        localStorage.removeItem('token');\n        history.push('/');\n      }\n\n      console.log(questions.results);\n      this.setState({\n        question0: {\n          category: questions.results[0].category,\n          type: questions.results[0].type,\n          question: questions.results[0].question,\n          correctAnswer: questions.results[0].correct_answer,\n          incorrectAnswers: questions.results[0].incorrect_answers\n        },\n        // question1: {\n        //   category: questions.results[1].category,\n        //   type: questions.results[1].type,\n        //   question: questions.results[1].question,\n        //   correctAnswer: questions.results[1].correct_answer,\n        //   incorrectAnswers: questions.results[1].incorrect_answers,\n        // },\n        // question2: {\n        //   category: questions.results[2].category,\n        //   type: questions.results[2].type,\n        //   question: questions.results[2].question,\n        //   correctAnswer: questions.results[2].correct_answer,\n        //   incorrectAnswers: questions.results[2].incorrect_answers,\n        // },\n        // question3: {\n        //   category: questions.results[3].category,\n        //   type: questions.results[3].type,\n        //   question: questions.results[3].question,\n        //   correctAnswer: questions.results[3].correct_answer,\n        //   incorrectAnswers: questions.results[3].incorrect_answers,\n        // },\n        // question4: {\n        //   category: questions.results[4].category,\n        //   type: questions.results[4].type,\n        //   question: questions.results[4].question,\n        //   correctAnswer: questions.results[4].correct_answer,\n        //   incorrectAnswers: questions.results[4].incorrect_answers,\n        // },\n        isLoading: false\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.requestQuestions();\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let randomIndex; // While there remain elements to shuffle.\n\n      while (currentIndex !== 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.randomizeOptions = () => {\n      const {\n        question0\n      } = this.state;\n      console.log(question0);\n      const {\n        correctAnswer,\n        incorrectAnswers\n      } = question0;\n      const answersArray = [...incorrectAnswers, correctAnswer];\n      this.shuffle(answersArray);\n      return answersArray;\n    };\n\n    this.handleColor = () => {\n      const btnCorreto = document.getElementById('correto');\n      btnCorreto.style.back;\n    };\n\n    this.sectionType = () => {\n      const {\n        question0\n      } = this.state;\n      const {\n        correctAnswer\n      } = question0;\n      const randomOptions = this.randomizeOptions(); // if (type === 'multiple') {\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-testid\": \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, randomOptions.map((option, index) => {\n        if (option === correctAnswer) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            \"data-testid\": \"correct-answer\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }\n          }, correctAnswer);\n        }\n\n        return /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          id: \"correto\",\n          \"data-testid\": `wrong-answer-${index}`,\n          key: index,\n          onClick: this.handleColor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }\n        }, option);\n      }));\n    };\n  }\n\n  render() {\n    const {\n      question0,\n      isLoading\n    } = this.state;\n    const {\n      category,\n      question\n    } = question0;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, \"carregando...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"h6\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, question), this.sectionType());\n  }\n\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default Game;","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","Header","Game","Component","state","question0","isLoading","requestQuestions","history","props","token","localStorage","getItem","console","log","response","fetch","questions","json","response_code","removeItem","push","results","setState","category","type","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","componentDidMount","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","randomizeOptions","answersArray","handleColor","btnCorreto","document","getElementById","style","back","sectionType","randomOptions","map","option","index","render","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\n\nclass Game extends React.Component {\n  state = {\n    question0: {},\n    // question1: {},\n    // question2: {},\n    // question3: {},\n    // question4: {},\n    isLoading: true,\n  }\n\n  requestQuestions = async () => {\n    const { history } = this.props;\n    const token = localStorage.getItem('token');\n    console.log(token);\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const questions = await response.json();\n    console.log(questions.response_code);\n    if (questions.response_code > 0) {\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n    console.log(questions.results);\n    this.setState({\n      question0: {\n        category: questions.results[0].category,\n        type: questions.results[0].type,\n        question: questions.results[0].question,\n        correctAnswer: questions.results[0].correct_answer,\n        incorrectAnswers: questions.results[0].incorrect_answers,\n      },\n      // question1: {\n      //   category: questions.results[1].category,\n      //   type: questions.results[1].type,\n      //   question: questions.results[1].question,\n      //   correctAnswer: questions.results[1].correct_answer,\n      //   incorrectAnswers: questions.results[1].incorrect_answers,\n      // },\n      // question2: {\n      //   category: questions.results[2].category,\n      //   type: questions.results[2].type,\n      //   question: questions.results[2].question,\n      //   correctAnswer: questions.results[2].correct_answer,\n      //   incorrectAnswers: questions.results[2].incorrect_answers,\n      // },\n      // question3: {\n      //   category: questions.results[3].category,\n      //   type: questions.results[3].type,\n      //   question: questions.results[3].question,\n      //   correctAnswer: questions.results[3].correct_answer,\n      //   incorrectAnswers: questions.results[3].incorrect_answers,\n      // },\n      // question4: {\n      //   category: questions.results[4].category,\n      //   type: questions.results[4].type,\n      //   question: questions.results[4].question,\n      //   correctAnswer: questions.results[4].correct_answer,\n      //   incorrectAnswers: questions.results[4].incorrect_answers,\n      // },\n      isLoading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    this.requestQuestions();\n  }\n\n  // source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    let currentIndex = array.length; let\n      randomIndex;\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  randomizeOptions = () => {\n    const { question0 } = this.state;\n    console.log(question0);\n    const { correctAnswer, incorrectAnswers } = question0;\n    const answersArray = [...incorrectAnswers, correctAnswer];\n    this.shuffle(answersArray);\n    return answersArray;\n  }\n\n  handleColor = () => {\n    const btnCorreto = document.getElementById('correto');\nbtnCorreto.style.back\n  }\n\n  sectionType = () => {\n    const { question0 } = this.state;\n    const { correctAnswer } = question0;\n    const randomOptions = this.randomizeOptions();\n    // if (type === 'multiple') {\n    return (\n      <div data-testid=\"answer-options\">\n        { randomOptions.map((option, index) => {\n          if (option === correctAnswer) {\n            return (\n              <button type=\"button\" data-testid=\"correct-answer\">\n                { correctAnswer }\n              </button>\n            );\n          } return (\n            <button\n              type=\"button\"\n              id=\"correto\"\n              data-testid={ `wrong-answer-${index}` }\n              key={ index }\n              onClick={ this.handleColor }\n            >\n              { option }\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { question0, isLoading } = this.state;\n    const { category, question } = question0;\n    if (isLoading) {\n      return (\n        <div>carregando...</div>\n      );\n    }\n    return (\n      <main>\n        <Header />\n        <h3 data-testid=\"question-category\">{ category }</h3>\n        <h6 data-testid=\"question-text\">{ question }</h6>\n        { this.sectionType() }\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport { scoreAction } from '../redux/actions';\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = {\n  easy: 1,\n  medium: 2,\n  hard: 3\n};\n\nclass Game extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      question0: {},\n      // question1: {},\n      // question2: {},\n      // question3: {},\n      // question4: {},\n      isLoading: true,\n      correctColor: '',\n      wrongColor: '',\n      stopTimer: false,\n      answer: ''\n    };\n\n    this.requestQuestions = async () => {\n      const {\n        history\n      } = this.props;\n      const token = localStorage.getItem('token');\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n      const questions = await response.json();\n\n      if (questions.response_code > 0) {\n        localStorage.removeItem('token');\n        history.push('/');\n      }\n\n      this.setState({\n        question0: {\n          category: questions.results[0].category,\n          type: questions.results[0].type,\n          difficulty: questions.results[0].difficulty,\n          question: questions.results[0].question,\n          correctAnswer: questions.results[0].correct_answer,\n          incorrectAnswers: questions.results[0].incorrect_answers\n        },\n        // question1: {\n        //   category: questions.results[1].category,\n        //   type: questions.results[1].type,\n        //   question: questions.results[1].question,\n        //   correctAnswer: questions.results[1].correct_answer,\n        //   incorrectAnswers: questions.results[1].incorrect_answers,\n        // },\n        // question2: {\n        //   category: questions.results[2].category,\n        //   type: questions.results[2].type,\n        //   question: questions.results[2].question,\n        //   correctAnswer: questions.results[2].correct_answer,\n        //   incorrectAnswers: questions.results[2].incorrect_answers,\n        // },\n        // question3: {\n        //   category: questions.results[3].category,\n        //   type: questions.results[3].type,\n        //   question: questions.results[3].question,\n        //   correctAnswer: questions.results[3].correct_answer,\n        //   incorrectAnswers: questions.results[3].incorrect_answers,\n        // },\n        // question4: {\n        //   category: questions.results[4].category,\n        //   type: questions.results[4].type,\n        //   question: questions.results[4].question,\n        //   correctAnswer: questions.results[4].correct_answer,\n        //   incorrectAnswers: questions.results[4].incorrect_answers,\n        // },\n        isLoading: false\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.requestQuestions();\n    };\n\n    this.componentDidUpdate = prevProps => {\n      const {\n        answer,\n        question0\n      } = this.state;\n      const {\n        seconds,\n        updateScore\n      } = this.props;\n\n      if (answer === 'correct' && prevProps.seconds !== seconds) {\n        const {\n          difficulty\n        } = question0;\n        const points = BASE_POINTS + seconds * DIFFICULTY_POINTS[difficulty];\n        updateScore(points);\n      }\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.randomizeOptions = () => {\n      const {\n        question0\n      } = this.state;\n      const {\n        correctAnswer,\n        incorrectAnswers\n      } = question0;\n      const answersArray = [...incorrectAnswers, correctAnswer];\n      this.shuffle(answersArray);\n      return answersArray;\n    };\n\n    this.handleColor = target => {\n      const {\n        id\n      } = target;\n      this.setState({\n        correctColor: '3px solid rgb(6, 240, 15)',\n        wrongColor: '3px solid rgb(255, 0, 0)',\n        stopTimer: true,\n        answer: id\n      });\n    };\n\n    this.sectionType = () => {\n      const {\n        question0,\n        correctColor,\n        wrongColor\n      } = this.state;\n      const {\n        correctAnswer\n      } = question0;\n      const randomOptions = this.randomizeOptions();\n      const {\n        disableOptions\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-testid\": \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      }, randomOptions.map((option, index) => {\n        if (option === correctAnswer) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            key: index,\n            type: \"button\",\n            disabled: disableOptions,\n            \"data-testid\": \"correct-answer\",\n            id: \"correct\",\n            style: {\n              border: correctColor\n            },\n            onClick: e => this.handleColor(e.target),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }\n          }, correctAnswer);\n        }\n\n        return /*#__PURE__*/React.createElement(\"button\", {\n          key: index,\n          type: \"button\",\n          disabled: disableOptions,\n          \"data-testid\": `wrong-answer-${index}`,\n          id: \"wrong\",\n          style: {\n            border: wrongColor\n          },\n          onClick: e => this.handleColor(e.target),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }\n        }, option);\n      }));\n    };\n  }\n\n  render() {\n    const {\n      question0,\n      isLoading,\n      stopTimer\n    } = this.state;\n    const {\n      category,\n      question\n    } = question0;\n    if (isLoading) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 28\n      }\n    }, \"carregando...\");\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Timer, {\n      stopTimer: stopTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, question), this.sectionType());\n  }\n\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScore: pontos => dispatch(scoreAction(pontos))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","Header","Timer","scoreAction","BASE_POINTS","DIFFICULTY_POINTS","easy","medium","hard","Game","Component","state","question0","isLoading","correctColor","wrongColor","stopTimer","answer","requestQuestions","history","props","token","localStorage","getItem","response","fetch","questions","json","response_code","removeItem","push","setState","category","results","type","difficulty","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","componentDidMount","componentDidUpdate","prevProps","seconds","updateScore","points","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","randomizeOptions","answersArray","handleColor","target","id","sectionType","randomOptions","disableOptions","map","option","index","border","e","render","propTypes","bool","isRequired","number","func","shape","mapStateToProps","timer","isDisabled","secondsLeft","mapDispatchToProps","dispatch","pontos"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport { scoreAction } from '../redux/actions';\n\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = { easy: 1, medium: 2, hard: 3 };\nclass Game extends React.Component {\n  state = {\n    question0: {},\n    // question1: {},\n    // question2: {},\n    // question3: {},\n    // question4: {},\n    isLoading: true,\n    correctColor: '',\n    wrongColor: '',\n    stopTimer: false,\n    answer: '',\n  }\n\n  requestQuestions = async () => {\n    const { history } = this.props;\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const questions = await response.json();\n    if (questions.response_code > 0) {\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n    this.setState({\n      question0: {\n        category: questions.results[0].category,\n        type: questions.results[0].type,\n        difficulty: questions.results[0].difficulty,\n        question: questions.results[0].question,\n        correctAnswer: questions.results[0].correct_answer,\n        incorrectAnswers: questions.results[0].incorrect_answers,\n      },\n      // question1: {\n      //   category: questions.results[1].category,\n      //   type: questions.results[1].type,\n      //   question: questions.results[1].question,\n      //   correctAnswer: questions.results[1].correct_answer,\n      //   incorrectAnswers: questions.results[1].incorrect_answers,\n      // },\n      // question2: {\n      //   category: questions.results[2].category,\n      //   type: questions.results[2].type,\n      //   question: questions.results[2].question,\n      //   correctAnswer: questions.results[2].correct_answer,\n      //   incorrectAnswers: questions.results[2].incorrect_answers,\n      // },\n      // question3: {\n      //   category: questions.results[3].category,\n      //   type: questions.results[3].type,\n      //   question: questions.results[3].question,\n      //   correctAnswer: questions.results[3].correct_answer,\n      //   incorrectAnswers: questions.results[3].incorrect_answers,\n      // },\n      // question4: {\n      //   category: questions.results[4].category,\n      //   type: questions.results[4].type,\n      //   question: questions.results[4].question,\n      //   correctAnswer: questions.results[4].correct_answer,\n      //   incorrectAnswers: questions.results[4].incorrect_answers,\n      // },\n      isLoading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    this.requestQuestions();\n  }\n\n  componentDidUpdate = (prevProps) => {\n    const { answer, question0 } = this.state;\n    const { seconds, updateScore } = this.props;\n    if (answer === 'correct' && prevProps.seconds !== seconds) {\n      const { difficulty } = question0;\n      const points = BASE_POINTS + (seconds * DIFFICULTY_POINTS[difficulty]);\n      updateScore(points);\n    }\n  };\n\n  // source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  randomizeOptions = () => {\n    const { question0 } = this.state;\n    const { correctAnswer, incorrectAnswers } = question0;\n    const answersArray = [...incorrectAnswers, correctAnswer];\n    this.shuffle(answersArray);\n    return answersArray;\n  }\n\n  handleColor = (target) => {\n    const { id } = target;\n    this.setState({\n      correctColor: '3px solid rgb(6, 240, 15)',\n      wrongColor: '3px solid rgb(255, 0, 0)',\n      stopTimer: true,\n      answer: id,\n    });\n  }\n\n  sectionType = () => {\n    const { question0, correctColor, wrongColor } = this.state;\n    const { correctAnswer } = question0;\n    const randomOptions = this.randomizeOptions();\n    const { disableOptions } = this.props;\n    return (\n      <div data-testid=\"answer-options\">\n        { randomOptions.map((option, index) => {\n          if (option === correctAnswer) {\n            return (\n              <button\n                key={ index }\n                type=\"button\"\n                disabled={ disableOptions }\n                data-testid=\"correct-answer\"\n                id=\"correct\"\n                style={ { border: correctColor } }\n                onClick={ (e) => this.handleColor(e.target) }\n              >\n                { correctAnswer }\n              </button>\n            );\n          } return (\n            <button\n              key={ index }\n              type=\"button\"\n              disabled={ disableOptions }\n              data-testid={ `wrong-answer-${index}` }\n              id=\"wrong\"\n              style={ { border: wrongColor } }\n              onClick={ (e) => this.handleColor(e.target) }\n            >\n              { option }\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { question0, isLoading, stopTimer } = this.state;\n    const { category, question } = question0;\n    if (isLoading) return (<div>carregando...</div>);\n    return (\n      <main>\n        <Header />\n        <Timer stopTimer={ stopTimer } />\n        <h3 data-testid=\"question-category\">{ category }</h3>\n        <h4 data-testid=\"question-text\">{ question }</h4>\n        { this.sectionType() }\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (pontos) => dispatch(scoreAction(pontos)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}
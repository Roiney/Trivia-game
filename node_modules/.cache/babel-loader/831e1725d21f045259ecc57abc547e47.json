{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/components/Timer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { disableOptions, resetTimerAction } from '../redux/actions';\nlet myInterval = null;\n\nclass Timer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      secondsLeft: 30\n    };\n\n    this.startTimer = () => {\n      const oneSecond = 1000;\n      myInterval = setInterval(() => this.setState(prevState => ({\n        secondsLeft: prevState.secondsLeft - 1\n      })), oneSecond);\n    };\n\n    this.componentDidMount = () => {\n      this.startTimer();\n    };\n\n    this.setStateAfterUpdate = () => {\n      const {\n        secondsLeft\n      } = this.state;\n      const {\n        timer\n      } = this.props;\n      timer(secondsLeft);\n    };\n\n    this.componentDidUpdate = (prevProps, previousState) => {\n      const {\n        stopTimer,\n        reset,\n        resetState\n      } = this.props;\n      const {\n        secondsLeft\n      } = previousState;\n\n      if (secondsLeft === 1 || stopTimer) {\n        clearInterval(myInterval);\n        this.setStateAfterUpdate();\n      }\n\n      if (reset && prevProps.reset !== reset) {\n        resetState();\n        this.resetTimer();\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      this.setState({\n        secondsLeft: 30\n      });\n    };\n\n    this.resetTimer = () => {\n      this.setState({\n        secondsLeft: 30\n      });\n      this.startTimer();\n    };\n  }\n\n  render() {\n    const {\n      secondsLeft\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, secondsLeft, \"segundos\");\n  }\n\n}\n\nTimer.propTypes = {\n  timer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.bool.isRequired,\n  reset: PropTypes.bool.isRequired,\n  resetState: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  timer: seconds => dispatch(disableOptions(seconds)),\n  resetState: () => dispatch(resetTimerAction())\n});\n\nexport default connect(null, mapDispatchToProps)(Timer);","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/components/Timer.js"],"names":["React","connect","PropTypes","disableOptions","resetTimerAction","myInterval","Timer","Component","state","secondsLeft","startTimer","oneSecond","setInterval","setState","prevState","componentDidMount","setStateAfterUpdate","timer","props","componentDidUpdate","prevProps","previousState","stopTimer","reset","resetState","clearInterval","resetTimer","componentWillUnmount","render","propTypes","func","isRequired","bool","mapDispatchToProps","dispatch","seconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;AAEA,IAAIC,UAAU,GAAG,IAAjB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACNC,MAAAA,WAAW,EAAE;AADP,KAD0B;;AAAA,SAKlCC,UALkC,GAKrB,MAAM;AACjB,YAAMC,SAAS,GAAG,IAAlB;AACAN,MAAAA,UAAU,GAAGO,WAAW,CACtB,MAAM,KAAKC,QAAL,CAAeC,SAAD,KAAgB;AAAEL,QAAAA,WAAW,EAAEK,SAAS,CAACL,WAAV,GAAwB;AAAvC,OAAhB,CAAd,CADgB,EAEtBE,SAFsB,CAAxB;AAID,KAXiC;;AAAA,SAalCI,iBAbkC,GAad,MAAM;AACxB,WAAKL,UAAL;AACD,KAfiC;;AAAA,SAiBlCM,mBAjBkC,GAiBZ,MAAM;AAC1B,YAAM;AAAEP,QAAAA;AAAF,UAAkB,KAAKD,KAA7B;AACA,YAAM;AAAES,QAAAA;AAAF,UAAY,KAAKC,KAAvB;AACAD,MAAAA,KAAK,CAACR,WAAD,CAAL;AACD,KArBiC;;AAAA,SAuBlCU,kBAvBkC,GAuBb,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACjD,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,KAAb;AAAoBC,QAAAA;AAApB,UAAmC,KAAKN,KAA9C;AACA,YAAM;AAAET,QAAAA;AAAF,UAAkBY,aAAxB;;AACA,UAAIZ,WAAW,KAAK,CAAhB,IAAqBa,SAAzB,EAAoC;AAClCG,QAAAA,aAAa,CAACpB,UAAD,CAAb;AACA,aAAKW,mBAAL;AACD;;AAAC,UAAIO,KAAK,IAAIH,SAAS,CAACG,KAAV,KAAoBA,KAAjC,EAAwC;AACxCC,QAAAA,UAAU;AACV,aAAKE,UAAL;AACD;AACF,KAjCiC;;AAAA,SAmClCC,oBAnCkC,GAmCX,MAAM;AAC3B,WAAKd,QAAL,CAAc;AAAEJ,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KArCiC;;AAAA,SAuClCiB,UAvCkC,GAuCrB,MAAM;AACjB,WAAKb,QAAL,CAAc;AACZJ,QAAAA,WAAW,EAAE;AADD,OAAd;AAGA,WAAKC,UAAL;AACD,KA5CiC;AAAA;;AA8ClCkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnB,MAAAA;AAAF,QAAkB,KAAKD,KAA7B;AAEA,wBACE;AAAI,qBAAY,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIC,WADJ,aADF;AAMD;;AAvDiC;;AA0DpCH,KAAK,CAACuB,SAAN,GAAkB;AAChBZ,EAAAA,KAAK,EAAEf,SAAS,CAAC4B,IAAV,CAAeC,UADN;AAEhBT,EAAAA,SAAS,EAAEpB,SAAS,CAAC8B,IAAV,CAAeD,UAFV;AAGhBR,EAAAA,KAAK,EAAErB,SAAS,CAAC8B,IAAV,CAAeD,UAHN;AAIhBP,EAAAA,UAAU,EAAEtB,SAAS,CAAC4B,IAAV,CAAeC;AAJX,CAAlB;;AAOA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,KAAK,EAAGkB,OAAD,IAAaD,QAAQ,CAAC/B,cAAc,CAACgC,OAAD,CAAf,CADY;AAExCX,EAAAA,UAAU,EAAE,MAAMU,QAAQ,CAAC9B,gBAAgB,EAAjB;AAFc,CAAf,CAA3B;;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAOgC,kBAAP,CAAP,CAAkC3B,KAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { disableOptions, resetTimerAction } from '../redux/actions';\n\nlet myInterval = null;\n\nclass Timer extends React.Component {\n  state = {\n    secondsLeft: 30,\n  }\n\n  startTimer = () => {\n    const oneSecond = 1000;\n    myInterval = setInterval(\n      () => this.setState((prevState) => ({ secondsLeft: prevState.secondsLeft - 1 })),\n      oneSecond,\n    );\n  }\n\n  componentDidMount = () => {\n    this.startTimer();\n  }\n\n  setStateAfterUpdate = () => {\n    const { secondsLeft } = this.state;\n    const { timer } = this.props;\n    timer(secondsLeft);\n  }\n\n  componentDidUpdate = (prevProps, previousState) => {\n    const { stopTimer, reset, resetState } = this.props;\n    const { secondsLeft } = previousState;\n    if (secondsLeft === 1 || stopTimer) {\n      clearInterval(myInterval);\n      this.setStateAfterUpdate();\n    } if (reset && prevProps.reset !== reset) {\n      resetState();\n      this.resetTimer();\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.setState({ secondsLeft: 30 });\n  }\n\n  resetTimer = () => {\n    this.setState({\n      secondsLeft: 30,\n    });\n    this.startTimer();\n  };\n\n  render() {\n    const { secondsLeft } = this.state;\n\n    return (\n      <h2 data-testid=\"timer\">\n        { secondsLeft }\n        segundos\n      </h2>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.bool.isRequired,\n  reset: PropTypes.bool.isRequired,\n  resetState: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  timer: (seconds) => dispatch(disableOptions(seconds)),\n  resetState: () => dispatch(resetTimerAction()),\n});\n\nexport default connect(null, mapDispatchToProps)(Timer);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport Timer from \"../components/Timer\";\nimport { scoreAction, thunkQuestions } from \"../redux/actions\";\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = {\n  easy: 1,\n  medium: 2,\n  hard: 3\n};\n\nclass Game extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionIndex: 0,\n      correctColor: \"\",\n      wrongColor: \"\",\n      stopTimer: false,\n      answer: \"\",\n      nextDisable: false,\n      reset: false\n    };\n\n    this.componentDidMount = () => {\n      const {\n        getQuestions\n      } = this.props;\n      const token = localStorage.getItem(\"token\");\n      getQuestions(token);\n    };\n\n    this.changeAnswerState = () => {\n      this.setState({\n        answer: \"\"\n      });\n    };\n\n    this.componentDidUpdate = () => {\n      const {\n        questionIndex,\n        answer\n      } = this.state;\n      const {\n        seconds,\n        updateScore,\n        questions\n      } = this.props;\n\n      if (answer === \"correct\") {\n        const {\n          difficulty\n        } = questions[questionIndex];\n        const points = BASE_POINTS + seconds * DIFFICULTY_POINTS[difficulty];\n        this.changeAnswerState();\n        updateScore(points);\n      }\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.randomizeOptions = questions => {\n      const {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers\n      } = questions;\n      const answersArray = [...incorrectAnswers, correctAnswer];\n      this.shuffle(answersArray);\n      return answersArray;\n    };\n\n    this.handleColor = target => {\n      const {\n        id\n      } = target;\n      this.setState({\n        correctColor: \"3px solid rgb(6, 240, 15)\",\n        wrongColor: \"3px solid rgb(255, 0, 0)\",\n        stopTimer: true,\n        answer: id,\n        nextDisable: true,\n        reset: false\n      });\n    };\n\n    this.sectionType = questions => {\n      const {\n        correctColor,\n        wrongColor\n      } = this.state;\n      const {\n        correct_answer: correctAnswer\n      } = questions;\n      const randomOptions = this.randomizeOptions(questions);\n      const {\n        disableOptions\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-testid\": \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }\n      }, randomOptions.map((option, index) => {\n        if (option === correctAnswer) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            key: index,\n            type: \"button\",\n            disabled: disableOptions,\n            \"data-testid\": \"correct-answer\",\n            id: \"correct\",\n            style: {\n              border: correctColor\n            },\n            onClick: e => this.handleColor(e.target),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }\n          }, correctAnswer);\n        }\n\n        return /*#__PURE__*/React.createElement(\"button\", {\n          key: index,\n          type: \"button\",\n          disabled: disableOptions,\n          \"data-testid\": `wrong-answer-${index}`,\n          id: \"wrong\",\n          style: {\n            border: wrongColor\n          },\n          onClick: e => this.handleColor(e.target),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }\n        }, option);\n      }));\n    };\n\n    this.redirectFunction = () => {\n      const {\n        history,\n        redirect\n      } = this.props;\n      if (redirect) history.push(\"/\");\n    };\n\n    this.nextQuestion = () => {\n      const {\n        questionIndex\n      } = this.state;\n      const {\n        history,\n        questions\n      } = this.props;\n\n      if (questionIndex < questions.length - 1) {\n        this.setState(prevState => ({\n          questionIndex: prevState.questionIndex + 1,\n          correctColor: \"\",\n          wrongColor: \"\",\n          stopTimer: false,\n          answer: \"\",\n          nextDisable: false,\n          reset: true\n        }));\n      } else {\n        this.setState({\n          answer: \"\"\n        });\n        history.push(\"/feedback\");\n      }\n    };\n  }\n\n  render() {\n    const {\n      questionIndex,\n      stopTimer,\n      nextDisable,\n      reset\n    } = this.state;\n    const {\n      questions,\n      isLoading\n    } = this.props;\n    this.redirectFunction();\n    if (isLoading) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 27\n      }\n    }, \"carregando...\");\n    const {\n      category,\n      question\n    } = questions[questionIndex];\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Timer, {\n      stopTimer: stopTimer,\n      reset: reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, question), this.sectionType(questions[questionIndex]), nextDisable && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: () => this.nextQuestion(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, \"Next\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, \"Sair do Jogo\"));\n  }\n\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n    difficulty: PropTypes.string.isRequired\n  })).isRequired,\n  redirect: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft,\n  questions: state.game.questions,\n  isLoading: state.game.isLoading,\n  redirect: state.game.redirect\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScore: pontos => dispatch(scoreAction(pontos)),\n  getQuestions: token => dispatch(thunkQuestions(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","Header","Timer","scoreAction","thunkQuestions","BASE_POINTS","DIFFICULTY_POINTS","easy","medium","hard","Game","Component","state","questionIndex","correctColor","wrongColor","stopTimer","answer","nextDisable","reset","componentDidMount","getQuestions","props","token","localStorage","getItem","changeAnswerState","setState","componentDidUpdate","seconds","updateScore","questions","difficulty","points","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","randomizeOptions","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","answersArray","handleColor","target","id","sectionType","randomOptions","disableOptions","map","option","index","border","e","redirectFunction","history","redirect","push","nextQuestion","prevState","render","isLoading","category","question","propTypes","bool","isRequired","number","func","arrayOf","shape","string","mapStateToProps","timer","isDisabled","secondsLeft","game","mapDispatchToProps","dispatch","pontos"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport Timer from \"../components/Timer\";\nimport { scoreAction, thunkQuestions } from \"../redux/actions\";\n\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = { easy: 1, medium: 2, hard: 3 };\nclass Game extends React.Component {\n  state = {\n    questionIndex: 0,\n    correctColor: \"\",\n    wrongColor: \"\",\n    stopTimer: false,\n    answer: \"\",\n    nextDisable: false,\n    reset: false,\n  };\n\n  componentDidMount = () => {\n    const { getQuestions } = this.props;\n    const token = localStorage.getItem(\"token\");\n    getQuestions(token);\n  };\n\n  changeAnswerState = () => {\n    this.setState({ answer: \"\" });\n  };\n\n  componentDidUpdate = () => {\n    const { questionIndex, answer } = this.state;\n    const { seconds, updateScore, questions } = this.props;\n    if (answer === \"correct\") {\n      const { difficulty } = questions[questionIndex];\n      const points = BASE_POINTS + seconds * DIFFICULTY_POINTS[difficulty];\n      this.changeAnswerState();\n      updateScore(points);\n    }\n  };\n\n  // source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  };\n\n  randomizeOptions = (questions) => {\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = questions;\n    const answersArray = [...incorrectAnswers, correctAnswer];\n    this.shuffle(answersArray);\n    return answersArray;\n  };\n\n  handleColor = (target) => {\n    const { id } = target;\n    this.setState({\n      correctColor: \"3px solid rgb(6, 240, 15)\",\n      wrongColor: \"3px solid rgb(255, 0, 0)\",\n      stopTimer: true,\n      answer: id,\n      nextDisable: true,\n      reset: false,\n    });\n  };\n\n  sectionType = (questions) => {\n    const { correctColor, wrongColor } = this.state;\n    const { correct_answer: correctAnswer } = questions;\n    const randomOptions = this.randomizeOptions(questions);\n    const { disableOptions } = this.props;\n    return (\n      <div data-testid=\"answer-options\">\n        {randomOptions.map((option, index) => {\n          if (option === correctAnswer) {\n            return (\n              <button\n                key={index}\n                type=\"button\"\n                disabled={disableOptions}\n                data-testid=\"correct-answer\"\n                id=\"correct\"\n                style={{ border: correctColor }}\n                onClick={(e) => this.handleColor(e.target)}\n              >\n                {correctAnswer}\n              </button>\n            );\n          }\n          return (\n            <button\n              key={index}\n              type=\"button\"\n              disabled={disableOptions}\n              data-testid={`wrong-answer-${index}`}\n              id=\"wrong\"\n              style={{ border: wrongColor }}\n              onClick={(e) => this.handleColor(e.target)}\n            >\n              {option}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  redirectFunction = () => {\n    const { history, redirect } = this.props;\n    if (redirect) history.push(\"/\");\n  };\n\n  nextQuestion = () => {\n    const { questionIndex } = this.state;\n    const { history, questions } = this.props;\n    if (questionIndex < questions.length - 1) {\n      this.setState((prevState) => ({\n        questionIndex: prevState.questionIndex + 1,\n        correctColor: \"\",\n        wrongColor: \"\",\n        stopTimer: false,\n        answer: \"\",\n        nextDisable: false,\n        reset: true,\n      }));\n    } else {\n      this.setState({ answer: \"\" });\n      history.push(\"/feedback\");\n    }\n  };\n\n  render() {\n    const { questionIndex, stopTimer, nextDisable, reset } = this.state;\n    const { questions, isLoading } = this.props;\n    this.redirectFunction();\n    if (isLoading) return <div>carregando...</div>;\n    const { category, question } = questions[questionIndex];\n    return (\n      <main>\n        <Header />\n        <Timer stopTimer={stopTimer} reset={reset} />\n        <h3 data-testid=\"question-category\">{category}</h3>\n        <h4 data-testid=\"question-text\">{question}</h4>\n        {this.sectionType(questions[questionIndex])}\n        {nextDisable && (\n          <div>\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              onClick={() => this.nextQuestion()}\n            >\n              Next\n            </button>\n          </div>\n        )}\n        <button type=\"button\" data-testid=\"btn-next\">\n          Sair do Jogo\n        </button>\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      category: PropTypes.string.isRequired,\n      question: PropTypes.string.isRequired,\n      correct_answer: PropTypes.string.isRequired,\n      incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n      difficulty: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  redirect: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft,\n  questions: state.game.questions,\n  isLoading: state.game.isLoading,\n  redirect: state.game.redirect,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (pontos) => dispatch(scoreAction(pontos)),\n  getQuestions: (token) => dispatch(thunkQuestions(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}
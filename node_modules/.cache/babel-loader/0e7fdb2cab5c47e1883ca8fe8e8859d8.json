{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport { scoreAction, thunkQuestions } from '../redux/actions';\nimport './Game.css';\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = {\n  easy: 1,\n  medium: 2,\n  hard: 3\n};\n\nclass Game extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionIndex: 0,\n      correctColor: '',\n      wrongColor: '',\n      stopTimer: false,\n      answer: '',\n      nextDisable: false,\n      reset: false,\n      questionsShuffled: []\n    };\n\n    this.componentDidMount = () => {\n      const {\n        getQuestions\n      } = this.props;\n      const token = localStorage.getItem('token');\n      getQuestions(token);\n    };\n\n    this.changeAnswerState = () => {\n      this.setState({\n        answer: ''\n      });\n    };\n\n    this.componentDidUpdate = () => {\n      const {\n        questionIndex,\n        answer\n      } = this.state;\n      const {\n        seconds,\n        updateScore,\n        questions\n      } = this.props;\n\n      if (answer === 'correct') {\n        const {\n          difficulty\n        } = questions[questionIndex];\n        const points = BASE_POINTS + seconds * DIFFICULTY_POINTS[difficulty];\n        this.changeAnswerState();\n        updateScore(points);\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      this.setState({\n        correctColor: '',\n        wrongColor: '',\n        stopTimer: false,\n        answer: '',\n        nextDisable: false\n      });\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    };\n\n    this.randomizeOptions = questions => {\n      const {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers\n      } = questions;\n      const answersArray = [...incorrectAnswers, correctAnswer];\n      this.shuffle(answersArray);\n      return answersArray;\n    };\n\n    this.handleColor = target => {\n      const {\n        id\n      } = target;\n      this.setState({\n        correctColor: '3px solid rgb(6, 240, 15)',\n        wrongColor: '3px solid rgb(255, 0, 0)',\n        stopTimer: true,\n        answer: id,\n        nextDisable: true,\n        reset: false,\n        acertou: \"\"\n      });\n    };\n\n    this.questionButtons = questions => {\n      const {\n        correctColor,\n        wrongColor,\n        questionsShuffled\n      } = this.state;\n      const {\n        correct_answer: correctAnswer\n      } = questions;\n      const {\n        disableOptions\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-container\",\n        \"data-testid\": \"answer-options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, questionsShuffled.map((option, index) => {\n        if (option === correctAnswer) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            key: index,\n            type: \"button\",\n            disabled: disableOptions,\n            \"data-testid\": \"correct-answer\",\n            id: \"correct\",\n            style: {\n              border: correctColor\n            },\n            onClick: e => this.handleColor(e.target),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }\n          }, this.decodeEntity(correctAnswer));\n        }\n\n        return /*#__PURE__*/React.createElement(\"button\", {\n          key: index,\n          type: \"button\",\n          disabled: disableOptions,\n          \"data-testid\": `wrong-answer-${index}`,\n          id: \"wrong\",\n          style: {\n            border: wrongColor\n          },\n          onClick: e => this.handleColor(e.target),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }\n        }, this.decodeEntity(option));\n      }));\n    };\n\n    this.sectionType = questions => {\n      const {\n        questionsShuffled\n      } = this.state;\n\n      if (questionsShuffled.length === 0) {\n        const randomOptions = this.randomizeOptions(questions);\n        this.setState({\n          questionsShuffled: randomOptions\n        });\n      }\n\n      return this.questionButtons(questions);\n    };\n\n    this.redirectFunction = () => {\n      const {\n        history,\n        redirect\n      } = this.props;\n      if (redirect) history.push('/');\n    };\n\n    this.nextQuestion = () => {\n      const {\n        questionIndex\n      } = this.state;\n      const {\n        history,\n        questions\n      } = this.props;\n\n      if (questionIndex < questions.length - 1) {\n        this.setState(prevState => ({\n          questionIndex: prevState.questionIndex + 1,\n          correctColor: '',\n          wrongColor: '',\n          stopTimer: false,\n          answer: '',\n          nextDisable: false,\n          reset: true,\n          questionsShuffled: []\n        }));\n      } else {\n        this.setState({\n          answer: ''\n        });\n        history.push('/feedback');\n      }\n    };\n\n    this.decodeEntity = inputStr => {\n      const textarea = document.createElement('textarea');\n      textarea.innerHTML = inputStr;\n      return textarea.value;\n    };\n  }\n\n  render() {\n    const {\n      questionIndex,\n      stopTimer,\n      nextDisable,\n      reset,\n      answer\n    } = this.state;\n    const {\n      questions,\n      isLoading\n    } = this.props;\n    this.redirectFunction();\n    if (isLoading) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 27\n      }\n    }, \"carregando...\");\n    const {\n      category,\n      question\n    } = questions[questionIndex];\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Timer, {\n      stopTimer: stopTimer,\n      reset: reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, category), /*#__PURE__*/React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, this.decodeEntity(question)), this.sectionType(questions[questionIndex]), nextDisable && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: () => this.nextQuestion(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 15\n      }\n    }, \"Next\"))));\n  }\n\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n    difficulty: PropTypes.string.isRequired\n  })).isRequired,\n  redirect: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft,\n  questions: state.game.questions,\n  isLoading: state.game.isLoading,\n  redirect: state.game.redirect\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScore: pontos => dispatch(scoreAction(pontos)),\n  getQuestions: token => dispatch(thunkQuestions(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Game.js"],"names":["React","PropTypes","connect","Header","Timer","scoreAction","thunkQuestions","BASE_POINTS","DIFFICULTY_POINTS","easy","medium","hard","Game","Component","state","questionIndex","correctColor","wrongColor","stopTimer","answer","nextDisable","reset","questionsShuffled","componentDidMount","getQuestions","props","token","localStorage","getItem","changeAnswerState","setState","componentDidUpdate","seconds","updateScore","questions","difficulty","points","componentWillUnmount","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","randomizeOptions","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","answersArray","handleColor","target","id","acertou","questionButtons","disableOptions","map","option","index","border","e","decodeEntity","sectionType","randomOptions","redirectFunction","history","redirect","push","nextQuestion","prevState","inputStr","textarea","document","createElement","innerHTML","value","render","isLoading","category","question","propTypes","bool","isRequired","number","func","arrayOf","shape","string","mapStateToProps","timer","isDisabled","secondsLeft","game","mapDispatchToProps","dispatch","pontos"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport { scoreAction, thunkQuestions } from '../redux/actions';\nimport './Game.css';\n\nconst BASE_POINTS = 10;\nconst DIFFICULTY_POINTS = { easy: 1, medium: 2, hard: 3 };\nclass Game extends React.Component {\n  state = {\n    questionIndex: 0,\n    correctColor: '',\n    wrongColor: '',\n    stopTimer: false,\n    answer: '',\n    nextDisable: false,\n    reset: false,\n    questionsShuffled: [],\n  };\n\n  componentDidMount = () => {\n    const { getQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    getQuestions(token);\n  };\n\n  changeAnswerState = () => {\n    this.setState({ answer: '' });\n  };\n\n  componentDidUpdate = () => {\n    const { questionIndex, answer } = this.state;\n    const { seconds, updateScore, questions } = this.props;\n    if (answer === 'correct') {\n      const { difficulty } = questions[questionIndex];\n      const points = BASE_POINTS + seconds * DIFFICULTY_POINTS[difficulty];\n      this.changeAnswerState();\n      updateScore(points);\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.setState({\n      correctColor: '',\n      wrongColor: '',\n      stopTimer: false,\n      answer: '',\n      nextDisable: false,\n    });\n  }\n\n  // source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  };\n\n  randomizeOptions = (questions) => {\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = questions;\n    const answersArray = [...incorrectAnswers, correctAnswer];\n    this.shuffle(answersArray);\n    return answersArray;\n  };\n\n  handleColor = (target) => {\n    const { id } = target;\n    this.setState({\n      correctColor: '3px solid rgb(6, 240, 15)',\n      wrongColor: '3px solid rgb(255, 0, 0)',\n      stopTimer: true,\n      answer: id,\n      nextDisable: true,\n      reset: false,\n      acertou: \"\"\n    });\n  };\n\n  questionButtons = (questions) => {\n    const { correctColor, wrongColor, questionsShuffled } = this.state;\n    const { correct_answer: correctAnswer } = questions;\n    const { disableOptions } = this.props;\n    return (\n      <div className=\"answer-container\" data-testid=\"answer-options\">\n        {questionsShuffled.map((option, index) => {\n          if (option === correctAnswer) {\n            return (\n              <button\n                key={ index }\n                type=\"button\"\n                disabled={ disableOptions }\n                data-testid=\"correct-answer\"\n                id=\"correct\"\n                style={ { border: correctColor } }\n                onClick={ (e) => this.handleColor(e.target) }\n              >\n                {this.decodeEntity(correctAnswer)}\n              </button>\n            );\n          }\n          return (\n            <button\n              key={ index }\n              type=\"button\"\n              disabled={ disableOptions }\n              data-testid={ `wrong-answer-${index}` }\n              id=\"wrong\"\n              style={ { border: wrongColor } }\n              onClick={ (e) => this.handleColor(e.target) }\n            >\n              {this.decodeEntity(option)}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n\n  sectionType = (questions) => {\n    const { questionsShuffled } = this.state;\n    if (questionsShuffled.length === 0) {\n      const randomOptions = this.randomizeOptions(questions);\n      this.setState({\n        questionsShuffled: randomOptions,\n      });\n    }\n    return this.questionButtons(questions);\n  };\n\n  redirectFunction = () => {\n    const { history, redirect } = this.props;\n    if (redirect) history.push('/');\n  };\n\n  nextQuestion = () => {\n    const { questionIndex } = this.state;\n    const { history, questions } = this.props;\n    if (questionIndex < questions.length - 1) {\n      this.setState((prevState) => ({\n        questionIndex: prevState.questionIndex + 1,\n        correctColor: '',\n        wrongColor: '',\n        stopTimer: false,\n        answer: '',\n        nextDisable: false,\n        reset: true,\n        questionsShuffled: [],\n      }));\n    } else {\n      this.setState({ answer: '' });\n      history.push('/feedback');\n    }\n  };\n\n  // Post de Jessy Damasceno da Turma 21A\n  // source:https://trybecourse.slack.com/archives/C03229WPQDA/p1656603304324169\n  decodeEntity = (inputStr) => {\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = inputStr;\n    return textarea.value;\n  }\n\n  render() {\n    const { questionIndex, stopTimer, nextDisable, reset, answer } = this.state;\n    const { questions, isLoading } = this.props;\n    this.redirectFunction();\n    if (isLoading) return <div>carregando...</div>;\n    const { category, question } = questions[questionIndex];\n    return (\n      <main>\n        <Header />\n        <div className=\"container\">\n          <Timer stopTimer={ stopTimer } reset={ reset } />\n          <h3 data-testid=\"question-category\">{category}</h3>\n          <h4 data-testid=\"question-text\">{this.decodeEntity(question)}</h4>\n          {this.sectionType(questions[questionIndex])}\n          {nextDisable && (\n            <div>\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ () => this.nextQuestion() }\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </div>\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  disableOptions: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      category: PropTypes.string.isRequired,\n      question: PropTypes.string.isRequired,\n      correct_answer: PropTypes.string.isRequired,\n      incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n      difficulty: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  redirect: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  disableOptions: state.timer.isDisabled,\n  seconds: state.timer.secondsLeft,\n  questions: state.game.questions,\n  isLoading: state.game.isLoading,\n  redirect: state.game.redirect,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (pontos) => dispatch(scoreAction(pontos)),\n  getQuestions: (token) => dispatch(thunkQuestions(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}
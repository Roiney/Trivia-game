{"ast":null,"code":"var _jsxFileName = \"/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Feedback.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.componentDidMount = () => {\n      const {\n        name,\n        score,\n        gravatarEmail\n      } = this.props;\n      const gravatar = md5(gravatarEmail).toString();\n      const gravatarURL = `https://www.gravatar.com/avatar/${gravatar}`;\n      this.updateRanking({\n        name,\n        score,\n        picture: gravatarURL\n      });\n    };\n\n    this.updateRanking = playerRanking => {\n      const prevRanking = JSON.parse(localStorage.getItem('ranking'));\n      const newRanking = prevRanking ? [...prevRanking, playerRanking] : [playerRanking];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n    };\n\n    this.requestLoginPage = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/');\n    };\n\n    this.requestRankingPage = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/ranking');\n    };\n  }\n\n  render() {\n    const {\n      score,\n      assertions\n    } = this.props;\n    const answerThreshold = 3;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"feedback-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, assertions < answerThreshold ? 'Could be better...' : 'Well Done!'), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Total score: \"), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, score), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"Total assertions: \"), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, assertions), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play-again\",\n      onClick: () => this.requestLoginPage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Play Again\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-ranking\",\n      onClick: () => this.requestRankingPage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Ranking\"));\n  }\n\n}\n\nFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => ({\n  name: state.player.name,\n  score: state.player.score,\n  gravatarEmail: state.player.gravatarEmail,\n  assertions: state.player.assertions\n});\n\nexport default connect(mapStateToProps)(Feedback);","map":{"version":3,"sources":["/home/roiney/work/trybe-projetos/sd-021-a-project-trivia-react-redux/src/pages/Feedback.js"],"names":["React","connect","PropTypes","md5","Header","Feedback","Component","componentDidMount","name","score","gravatarEmail","props","gravatar","toString","gravatarURL","updateRanking","picture","playerRanking","prevRanking","JSON","parse","localStorage","getItem","newRanking","setItem","stringify","requestLoginPage","history","push","requestRankingPage","render","assertions","answerThreshold","propTypes","string","isRequired","number","shape","func","mapStateToProps","state","player"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport Header from '../components/Header';\n\nclass Feedback extends React.Component {\n  componentDidMount = () => {\n    const { name, score, gravatarEmail } = this.props;\n\n    const gravatar = md5(gravatarEmail).toString();\n\n    const gravatarURL = `https://www.gravatar.com/avatar/${gravatar}`;\n\n    this.updateRanking({\n      name,\n      score,\n      picture: gravatarURL,\n    });\n  }\n\n  updateRanking = (playerRanking) => {\n    const prevRanking = JSON.parse(localStorage.getItem('ranking'));\n    const newRanking = prevRanking ? [...prevRanking, playerRanking] : [playerRanking];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n  }\n\n  requestLoginPage = () => {\n    const { history } = this.props;\n    history.push('/');\n  };\n\n  requestRankingPage = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { score, assertions } = this.props;\n    const answerThreshold = 3;\n    return (\n      <main>\n        <Header />\n        <h3 data-testid=\"feedback-text\">\n          { assertions < answerThreshold ? 'Could be better...' : 'Well Done!' }\n        </h3>\n        <span>Total score: </span>\n        <span data-testid=\"feedback-total-score\">{ score }</span>\n        <span>Total assertions: </span>\n        <span data-testid=\"feedback-total-question\">{ assertions }</span>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => this.requestLoginPage() }\n        >\n          Play Again\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ () => this.requestRankingPage() }\n        >\n          Ranking\n        </button>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  gravatarEmail: state.player.gravatarEmail,\n  assertions: state.player.assertions,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}